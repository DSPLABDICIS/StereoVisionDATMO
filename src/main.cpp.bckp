/*
 * main.cpp
 *
 *  Created on: Feb 26, 2013
 *      Author: luzdora
 */
#include <iostream>
#include <iomanip>
#include <cv.h>
#include <highgui.h>
//#include "klt.hpp"
#include "kltTest.hpp"
//#include "imageConversion.hpp"
#include "cluster.hpp"
#include "tracker.hpp"
#include "DepthFilter.hpp"
#define mindist 10
//#define firstnum 6580
#define lastnum 6586

using namespace std;
using namespace klt;
using namespace cluster;
using namespace tracker;

int main(void)
{
	int plIm, movF=0, modu=4, ini=1; //read the ini position in the table
	int ti, tj;
	int firstnum=130;
	int c4= firstnum + modu;
	int c=0, c1;
	int nF = 150, nFaux=0, sizeMaskProb = mindist*2+1;

//	/***************************************************************/
//	/****************Depth filter initialization********************/
//	/***************************************************************/
//	float sigmae = 3.5;
//	float sigmac = 2.5 , sigmas = 3.0;
//	int nImages = 6, w = 5;
//	DepthFilter::DepthFilter dFilter(nImages,w,sigmae,sigmac, sigmas);

	/***************************************************************/
	/********** Initialization and Reading of Images****************/
	/***************************************************************/
	char imaPath[50];
	char imaPathD[50];
	char nbuffer[50];
	cv::Mat image, imageprec, imagecopy, *imaR, *gray_image;
	uchar *mask, *maskprob;
	int iC, iR, pasIma=3;
	int iniTrack=0;  // Flag to init tracking object


	//std::cout<<"Start Main"<<std::endl;
	sprintf(imaPath,"../images/RGB_Dani_1_%i.tiff",firstnum);
	printf("%s\n",imaPath);
	sprintf(imaPathD,"../images/depth_Dani_1_%i.tiff",firstnum);
	printf("%s\n",imaPathD);
	printf("\n");

	image = cv::imread(imaPath,1);
	if(!image.data )
	{
		printf( "No image data \n" );
		return -1;
	}


	/***************************************************************/
	/************************Image Pre-Process**********************/
	/***************************************************************/
	imagecopy = image;
	gray_image = klt::convertImage(image);

	/*** Initialize image dimensions **/
	iC=gray_image->cols;
	iR=gray_image->rows;

	cv::namedWindow("treated frame",CV_WINDOW_AUTOSIZE);
	imshow("treated frame",image);


	//Conversion Display
	cv::namedWindow("Image",CV_WINDOW_AUTOSIZE);
	//std::cout<<"Start KLT"<<std::endl;
	//cv::waitKey(0);//-----------------------Debug

	/***************************************************************/
	/********* Initialization of KLT class *************************/
	/***************************************************************/
	klt::Klt *track_er;
	KLT_FeatureList fl;
	KLT_TrackingContext tc;
	track_er = new klt::Klt();
	tc = track_er->CreateTrackingContext();
	initTrackContext(tc,2);
	fl = track_er->CreateFeatureList(nF);
	mask = reserveOccupationMask(iC,iR);
	maskprob = reserveOccupationMask(sizeMaskProb,sizeMaskProb);
	initialiseProbaMask(maskprob,sizeMaskProb,mindist);
	initialiseOccupationMask(mask,maskprob,iC,iR);

	//std::cout<<"Start Object"<<std::endl;
	//cv::waitKey(0);//-----------------------Debug

	/***************************************************************/
	/********* Initialization of object *************************/
	/***************************************************************/
	int initialization=0, dim=6;
	int snkFlag=0; // 0: No snake process
	mat xp(1,dim);
	mat obfus(1,dim);
	tracker::lstclas *trOb;
	trOb= new tracker::lstclas();

	/***************************************************************/
	/********* Init Kalman Matrix and Vector*************************/
	/***************************************************************/
	vec X0(4);
	vec Z(2);
	vec R(2);
	mat P0(4,4);
	mat F(4,4);
	mat H(2,4);
	int dt=0.1;

	H(0,0) = 1; H(0,1) = 0; H(0,2) = 0; H(0,3) = 0;
	H(1,0) = 0; H(1,1) = 1; H(1,2) = 0; H(1,3) = 0;

	F(0,0) = 1; F(0,1) = 0; F(0,2) = dt; F(0,3) = 0;
	F(1,0) = 0; F(1,1) = 1; F(1,2) = 0; F(1,3) = dt;
	F(2,0) = 0; F(2,1) = 0; F(2,2) = 1; F(2,3) = 0;
	F(3,0) = 0; F(3,1) = 0; F(3,2) = 0; F(3,3) = 1;


	//std::cout<<"Detect Features"<<std::endl;
	//cv::waitKey(0);//-----------------------Debug

	/********* Select Initial Features*************************/
	track_er->SelectGoodFeatures(tc,*gray_image,fl,-1.0,0,mask,maskprob);

	/********* Save Initial Features*************************/
	track_er->StoreFeatureList(fl);

	track_er->StoreFeatureList_Trail(fl);
	track_er->WriteFeatureListToImg(fl,imagecopy);
	//std::cout<<fl->nFeatures<<std::endl;

	/*
	for(int i=0;i<fl->nFeatures;i++)
		std::cout<<std::setw(10)<<(int)fl->feature[i]->x<<std::setw(10)<<(int)fl->feature[i]->y<<std::setw(10)<<(int)fl->feature[i]->z<<std::setw(10)<<(int)fl->feature[i]->val<<std::setw(10)<<(int)fl->feature[i]->errorval<<std::endl;
	 */
	//Result display
	imshow("Image", imagecopy);


	/***************************************************************/
	/********   Init KLT tracker, cluster process and MOT  *********/
	/***************************************************************/
	std::cout<<"Start For"<<std::endl;
	cv::waitKey(0);
	try{
		for(int i=firstnum+pasIma;i<=lastnum;i=i+pasIma)
		{
			// Reading new image
			sprintf(imaPath,"../images/RGB_Dani_1_%i.tiff",i);
			printf("%s\n",imaPath);
			sprintf(imaPathD,"../images/depth_Dani_1_%i.tiff",i);
			printf("%s\n",imaPathD);
			sprintf(nbuffer,"image%i",i);
			imageprec = *gray_image;
			image = cv::imread(imaPath,1);
			if(!image.data )
			{
				printf( "No image data \n" );
				return -1;
			}
			imagecopy = image;
			gray_image = klt::convertImage(image);
			//std::cout<<"End Load"<<std::endl;
			//************** SHOW IMAGE *****************

			imshow("treated frame",imagecopy);

			// ****************** TRACKING OF FEATURES ******************
			//std::cout<<"Start Tracking"<<std::endl;
			track_er->TrackFeatures(tc,imageprec,*gray_image,fl,1,mask,maskprob,0.1);
			track_er->featuresVelocity(fl,0.1,0);
			track_er->StoreFeatureList(fl);
			track_er->StoreFeatureList_Trail(fl);



			/***************************************************************/
			/********   Tracking Section  *********/
			/***************************************************************/

			if (iniTrack>0){
				nFaux = nF- tracker::objectTracking(*trOb, tc, imageprec, *gray_image, Z, H, R, iC, iR, *imaR, mask, maskprob, dt, pasIma);
				iniTrack = trOb->totalClusters;
				if(iniTrack>0)
					tracker::deleteObjectZone(*trOb, mask, maskprob,tc, iC, iR, pasIma);
				else
					initialization = 0;
			}//todo check differences

			std::cout<<"Iteracion "<<i<<" goal "<<firstnum+4*pasIma<<std::endl;
			if(i==firstnum+4*pasIma)
			{
				std::cout<<"Evaluating Moving"<<std::endl;
				for(ti=0;ti<fl->nFeatures;ti++)
					if(fl->feature[ti]->trail>=4)
					{
						std::cout<<std::setw(10)<<ti;
						for(tj=0;tj<5;tj++)
							std::cout<<std::setw(10)<<track_er->ft5->feature[ti][tj]->x<<std::setw(10)<<track_er->ft5->feature[ti][tj]->y;
						std::cout<<std::endl;
					}
				std::cout<<std::endl<<std::endl<<"Evaluating Static"<<std::endl;
				for(ti=0;ti<fl->nFeatures;ti++)
					if(fl->feature[ti]->trail<4&&fl->feature[ti]->val>=0)
					{
						std::cout<<std::setw(10)<<ti;
						for(tj=0;tj<5;tj++)
							std::cout<<std::setw(10)<<track_er->ft5->feature[ti][tj]->x<<std::setw(10)<<track_er->ft5->feature[ti][tj]->y;
						std::cout<<std::endl;
					}
			}
			/***************************************************************/
			/********   Clustering Evaluation Only if it is the 4th image ****/
			/***************************************************************/


			if (i==-1)
			{
				plIm = countMovingTrackingFeatures(fl);
				// If there is a minimal quantity of points then cluster it
				if (plIm>1){
					track_er->ExtractMovingPoints(xp, ini, modu, fl);
					c= clusteringTrackingPoints(xp, iC, iR);
					std::cout << "Number of clusters " << c << std::endl;

					if (c>0 && iniTrack==0){
						c1 = c;
						plIm = initTrackingObjects(*trOb, xp, X0, P0, iC, iR, tc, 0, c, plIm, dt, snkFlag);
						if (plIm>0){

							c= trOb->totalClusters;
							std::cout << "Number of objects initialization" << c << std::endl;
							iniTrack = c;
							setOccupationZoneInMask(mask, maskprob, fl, iC, iR,mindist, 0);
							nFaux= nF- plIm;
							fl=track_er->ResizeFeatureList(fl, nFaux);
							tracker::kalmanFilterPrediction(*trOb, dt, iC, iR, tc, *imaR, mask);

							c=0;
							initialization=plIm;
						}
						// Starting fusion evaluation of clusters
						if(c>0){
							initialiseOccupationMask(mask,maskprob, iC,iR);
							obfus.resize(nF-nFaux,dim);
							// c is the number of clusters with points detected
							c=tracker::jointObjectData(xp,*trOb,obfus,c,iniTrack+c,plIm);

							if(c>=2){ // only if 2 or more clusters were found
								std::cout << "Number of clusters " << c << "Number of clusters before"<< iniTrack<< std::endl;
								c=tracker::mergingObjects(obfus,c,iniTrack);
								std::cout << "Number of clusters after merging" << c << std::endl;

								if (c>0){
									plIm=tracker::initTrackingObjects(*trOb, obfus,X0,P0,iC,iR,tc,iniTrack,c,obfus.size1(),dt,snkFlag);
									iniTrack=trOb->totalClusters;
									std::cout << "Number of objects" << iniTrack << std::endl;
									// 1 indicate clusters that do not move
									setOccupationZoneInMask(mask, maskprob,fl,iC, iR,mindist,1);
									nFaux=nF-plIm;
									fl=track_er->ResizeFeatureList(fl,nFaux);
									tracker::kalmanFilterPrediction(*trOb,dt,iC,iR,tc,*imaR,mask);
									//		tracker::deleteObjectZone(*trOb,mask,maskprob,tc,iC,iR,plIm);
								}
								else{
									std::cout << "There is not new objects by merging" << std::endl;
									setOccupationZoneInMask(mask, maskprob,fl,iC, iR, mindist,1);
								}
							}
							else{
								std::cout << "There is not 2 clusters at least, no fussion is possible" << std::endl;
								setOccupationZoneInMask(mask, maskprob, fl,iC, iR, mindist, 1);
							}
						}
						std::cout << "Delete cluster zone and select new features" << std::endl;
						tracker::deleteObjectZone(*trOb, mask,maskprob,tc,iC,iR,plIm);
						track_er->SelectGoodFeatures(tc, *gray_image,fl,-1,0,mask,maskprob);
						/******************* AQUI VA CODIGO PARA VISUALIZACION EN IMAGEN RESULTANTE *************/
						WriteClustersToImg(xp, *imaR, c1);

					} else {
						std::cout << "THERE IS NO CLUSTERS OR INTERESTING POINTS" << std::endl;
						initialiseOccupationMask(mask,maskprob, iC,iR);
						tracker::deleteObjectZone(*trOb, mask,maskprob,tc,iC,iR,plIm);
						setOccupationZoneInMask(mask,maskprob, fl,iC, iR,10,0);
						track_er->SelectGoodFeatures(tc,*gray_image, fl,-1,0,mask,maskprob);
					}
				} else {
					std::cout << "NO MINIMAL MOBILE POINTS, FEATLIST TO MASK" << std::endl;
					setOccupationZoneInMask(mask,maskprob, fl,iC, iR,mindist,1);
					track_er->SelectGoodFeatures(tc,*gray_image, fl,-1,0,mask,maskprob);
				}

				ini = i-firstnum+1;
				if(ini>=96){
					firstnum +=96;
					ini= i -firstnum+1;
				}
				c4 = i + modu;
				movF=0;
				/****** SALVAR RESULTADOS EN IMAGEN ACCUMULADO *******/
			}
			/***************************************************************/
			/********   SAVE IMAGE FEATURE LIST ****/
			/***************************************************************/

			track_er->WriteFeatureListToImg(fl,imagecopy);
			imshow("Image",imagecopy);
			/*for(int i=0;i<fl->nFeatures;i++)
					std::cout<<std::setw(10)<<i<<std::setw(10)<<(int)fl->feature[i]->x<<std::setw(10)<<(int)fl->feature[i]->y<<std::setw(10)<<(int)fl->feature[i]->z<<std::setw(10)<<(int)fl->feature[i]->val<<std::setw(10)<<(int)fl->feature[i]->errorval<<std::endl;*/

			cv::waitKey(0);
			// SAVE FEATURE LIST IN ACCUMULATE IMAGE
		}

	}
	catch(char * str)
	{
		printf("%s",str);
	}

	cv::waitKey(0);
	printf("fin\n");
	track_er->FreeFeatureList(fl);
	track_er->FreeTrackingContext(tc);
	freeOccupationMask(mask);
	freeOccupationMask(maskprob);
	delete track_er;
	delete gray_image;
	tracker::eraserlstclass(*trOb);
	delete trOb;
	//free(mask);
	//	free(maskprob);
	return 0;
}
